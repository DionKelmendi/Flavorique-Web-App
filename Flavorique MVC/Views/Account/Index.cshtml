@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@model PaginatedList<UserInfo>
@{
    ViewData["Title"] = "Index";
    string sortValue = Context.Request.Query["sortOrder"].ToString();
    string oppositeEmailFilter = ViewData["EmailFilterParm"].ToString() == "confirmed" ? "" : "confirmed";
    var prevDisabled = Model.PageIndex == 1 ? "disabled" : "";
    var nextDisabled = Model.PageIndex == Model.TotalPages ? "disabled" : "";
}


<div class="container p-3">
    <div class="row pt-4">
        <div class="col-6">
            <h2 class="text-primary"> User List </h2>
        </div>
    </div>
</div>

<form asp-action="Index" method="get">
    <div class="form-actions d-flex align-items-baseline justify-content-between">
        <p>
            Find by username or email: <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" />
            <input type="submit" value="Search" class="btn btn-primary" />

            <div class="btn-group">
                <a class="btn btn-secondary" class="dropdown-item" asp-action="Index" asp-route-sortOrder="@ViewData["CurrentSort"]" asp-route-searchString="@ViewData["CurrentFilter"]" asp-route-roleFilter="" asp-route-emailFilter="" style="color: white; text-decoration: none;">
                    @((string.IsNullOrEmpty(ViewData["RoleFilterParm"]?.ToString()) ? "Select Role" : char.ToUpper(ViewData["RoleFilterParm"].ToString()[0]) + ViewData["RoleFilterParm"].ToString().Substring(1)))
                </a>
                <button type="button" class="btn btn-secondary dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                </button>
                <div class="dropdown-menu">

                    <a class="dropdown-item" asp-action="Index" asp-route-sortOrder="@ViewData["CurrentSort"]" asp-route-searchString="@ViewData["CurrentFilter"]" asp-route-roleFilter="admin" asp-route-emailFilter="" style="color: black; text-decoration: none;">
                        Admin
                    </a>
                    <div class="dropdown-divider"></div>

                    <a class="dropdown-item" asp-action="Index" asp-route-sortOrder="@ViewData["CurrentSort"]" asp-route-searchString="@ViewData["CurrentFilter"]" asp-route-roleFilter="user" asp-route-emailFilter="" style="color: black; text-decoration: none;">
                        User
                    </a>
                </div>
            </div>

            <a asp-action="Index" asp-route-sortOrder="@ViewData["CurrentSort"]" asp-route-searchString="@ViewData["CurrentFilter"]" asp-route-emailFilter="@ViewData["EmailFilterParm"]" asp-route-roleFilter="@ViewData["RoleFilterParm"]" style="color: black; text-decoration: none; cursor: default">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" name="emailFilter" @(oppositeEmailFilter.ToString() == "confirmed" ? "checked" : "")>
                    <p class="form-check-label" style="user-select: none">
                        Has confirmed Email
                    </p>
                </div>
            </a>
        </p>
        <a asp-action="Index">Back to Full List</a>

    </div>
</form>

<table class="table table-bordered w-100">
    <thead>
        <tr class="table-primary">
            <th>
                User Id
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["EmailSortParm"]" asp-route-emailFilter="@oppositeEmailFilter" asp-route-roleFilter="@ViewData["RoleFilterParm"]" asp-route-searchString="@ViewData["CurrentFilter"]">Email</a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["UsernameSortParm"]" asp-route-emailFilter="@oppositeEmailFilter" asp-route-roleFilter="@ViewData["RoleFilterParm"]" asp-route-searchString="@ViewData["CurrentFilter"]">Username</a>
            </th>
            <th style="width: 150px">
                <a asp-action="Index" asp-route-sortOrder="@ViewData["PhoneSortParm"]" asp-route-emailFilter="@oppositeEmailFilter" asp-route-roleFilter="@ViewData["RoleFilterParm"]" asp-route-searchString="@ViewData["CurrentFilter"]">Phone Number</a>
            </th>
            <th style="width: 150px">
                <a asp-action="Index" asp-route-sortOrder="@ViewData["EmailConfirmedSortParm"]" asp-route-emailFilter="@oppositeEmailFilter" asp-route-roleFilter="@ViewData["RoleFilterParm"]" asp-route-searchString="@ViewData["CurrentFilter"]">Confirmed Email</a>
            </th>
            <th>Role</th>
            <th colspan="3"></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var obj in Model)
        {
            <tr>
                <td style="word-break: break-word">@obj.Id</td>
                <td>@obj.Email</td>
                <td>@obj.UserName</td>
                <td>
                    @if (obj.PhoneNumber == null)
                    {
                        @("None")
                    }
                    else
                    {
                        @obj.PhoneNumber
                    }
                </td>
                <td class="d-flex flex-column" style="gap: 20px;">
                    @if (obj.EmailConfirmed)
                    {
                           @obj.EmailConfirmed
                           <a asp-controller="Account" asp-action="ToggleEmailConfirm" asp-route-id="@obj.Id" class="btn btn-danger">Unconfirm</a>
                    }
                    else
                    {
                        @obj.EmailConfirmed
                        <a asp-controller="Account" asp-action="ToggleEmailConfirm" asp-route-id="@obj.Id" class="btn btn-success">Confirm</a>
                    }
                </td>
                <td style="gap: 20px;">
                    @{
                        var user = await UserManager.FindByIdAsync(obj.Id);
                        var userRoles = await UserManager.GetRolesAsync(user);
                        string userRole = userRoles.FirstOrDefault();
                    }
                    @userRole
                    <a asp-controller="Account" asp-action="ToggleRole" asp-route-id="@obj.Id" class="btn btn-info" style="margin-top: 1.25rem">Toggle</a>

                </td>
                <td>
                    <a asp-controller="Account" asp-action="Details" asp-route-id="@obj.Id" class="btn btn-info"><i class="bi bi-search"></i> &nbsp; Detail View</a>
                </td>
                <td>
                    <a asp-controller="Account" asp-action="Edit" asp-route-id="@obj.Id" asp-route-returnRoute="Index" class="btn btn-warning"><i class="bi bi-pencil-square"></i> &nbsp; Edit User</a>
                </td>
                <td>
                    <button type="button" onclick="addModalInfo" class="btn btn-danger modalButton" data-bs-toggle="modal" data-bs-target="#deleteModal">
                        <i class="bi bi-trash"></i> &nbsp; Delete Account
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-searchString="@ViewData["CurrentFilter"]"
   asp-route-emailFilter="@oppositeEmailFilter"
   asp-route-roleFilter="@ViewData["RoleFilterParm"]"
   class="btn btn-light @prevDisabled">
    Previous
</a>

@for (int i = 1; i <= Model.TotalPages; i++)
{
    <a asp-action="Index"
       asp-route-sortOrder="@ViewData["CurrentSort"]"
       asp-route-pageNumber="@i"
       asp-route-searchString="@ViewData["CurrentFilter"]"
       asp-route-emailFilter="@oppositeEmailFilter"
       asp-route-roleFilter="@ViewData["RoleFilterParm"]"
       class="btn @(Model.PageIndex == i ? "btn-primary" : "btn-light")">
        @i
    </a>
}

<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-searchString="@ViewData["CurrentFilter"]"
   asp-route-emailFilter="@oppositeEmailFilter"
   asp-route-roleFilter="@ViewData["RoleFilterParm"]"
   class="btn btn-light @nextDisabled">
    Next
</a>

<script>
    document.addEventListener("click", function (e) {

        const target = e.target;
        if (target.classList.contains("modalButton")) {
            let targetRow = target.parentElement.parentElement.cells;
            let cellData = [targetRow[0].innerText, targetRow[1].innerText, targetRow[2].innerText];

            console.log(cellData);

            let form = document.getElementById("modalForm");
            form[0].value = cellData[1];
            form[1].value = cellData[2];

            let deleteButton = document.querySelector(".confirmDelete");
            deleteButton.href = "Account/Delete/" + cellData[0] + "?returnRoute=Index";

            console.log(deleteButton.href);
        }
    })

</script>

<!-- Modal -->
@{
    <partial name="_DeletePartial" />
}

@section Scripts{
    @{
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/js/bootstrap.min.js" integrity="sha384-j0CNLUeiqtyaRmlzUHCPZ+Gy5fQu0dQ6eZ/xAww941Ai1SxSY+0EQqNXNE6DZiVc" crossorigin="anonymous"></script>
    }
}